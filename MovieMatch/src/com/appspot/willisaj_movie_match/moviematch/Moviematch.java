/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-01-14 17:53:03 UTC)
 * on 2015-02-18 at 23:06:41 UTC 
 * Modify at your own risk.
 */

package com.appspot.willisaj_movie_match.moviematch;

/**
 * Service definition for Moviematch (v1).
 *
 * <p>
 * Movie Match API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link MoviematchRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Moviematch extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.19.1 of the moviematch library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://willisaj-movie-match.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "moviematch/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Moviematch(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Moviematch(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Account collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Moviematch moviematch = new Moviematch(...);}
   *   {@code Moviematch.Account.List request = moviematch.account().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Account account() {
    return new Account();
  }

  /**
   * The "account" collection of methods.
   */
  public class Account {

    /**
     * Add or update an account
     *
     * Create a request for the method "account.insert".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.AccountProtoUserNamePasswordEmailWillShare}
     * @return the request
     */
    public Insert insert(com.appspot.willisaj_movie_match.moviematch.model.AccountProtoUserNamePasswordEmailWillShare content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.Account> {

      private static final String REST_PATH = "account/insert";

      /**
       * Add or update an account
       *
       * Create a request for the method "account.insert".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.AccountProtoUserNamePasswordEmailWillShare}
       * @since 1.13
       */
      protected Insert(com.appspot.willisaj_movie_match.moviematch.model.AccountProtoUserNamePasswordEmailWillShare content) {
        super(Moviematch.this, "POST", REST_PATH, content, com.appspot.willisaj_movie_match.moviematch.model.Account.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * List all of the accounts with this username
     *
     * Create a request for the method "account.list".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param userName
     * @return the request
     */
    public List list(java.lang.String userName) throws java.io.IOException {
      List result = new List(userName);
      initialize(result);
      return result;
    }

    public class List extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.AccountCollection> {

      private static final String REST_PATH = "account/list/{user_name}";

      /**
       * List all of the accounts with this username
       *
       * Create a request for the method "account.list".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userName
       * @since 1.13
       */
      protected List(java.lang.String userName) {
        super(Moviematch.this, "GET", REST_PATH, null, com.appspot.willisaj_movie_match.moviematch.model.AccountCollection.class);
        this.userName = com.google.api.client.util.Preconditions.checkNotNull(userName, "Required parameter userName must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("user_name")
      private java.lang.String userName;

      /**

       */
      public java.lang.String getUserName() {
        return userName;
      }

      public List setUserName(java.lang.String userName) {
        this.userName = userName;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Boolean willShare;

      /**

       */
      public java.lang.Boolean getWillShare() {
        return willShare;
      }

      public List setWillShare(java.lang.Boolean willShare) {
        this.willShare = willShare;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String password;

      /**

       */
      public java.lang.String getPassword() {
        return password;
      }

      public List setPassword(java.lang.String password) {
        this.password = password;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public List setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Actorpreference collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Moviematch moviematch = new Moviematch(...);}
   *   {@code Moviematch.Actorpreference.List request = moviematch.actorpreference().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Actorpreference actorpreference() {
    return new Actorpreference();
  }

  /**
   * The "actorpreference" collection of methods.
   */
  public class Actorpreference {

    /**
     * Delete the given actor preference
     *
     * Create a request for the method "actorpreference.delete".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param entityKey
     * @return the request
     */
    public Delete delete(java.lang.String entityKey) throws java.io.IOException {
      Delete result = new Delete(entityKey);
      initialize(result);
      return result;
    }

    public class Delete extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.ActorPreference> {

      private static final String REST_PATH = "actorpreference/delete/{entityKey}";

      /**
       * Delete the given actor preference
       *
       * Create a request for the method "actorpreference.delete".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param entityKey
       * @since 1.13
       */
      protected Delete(java.lang.String entityKey) {
        super(Moviematch.this, "DELETE", REST_PATH, null, com.appspot.willisaj_movie_match.moviematch.model.ActorPreference.class);
        this.entityKey = com.google.api.client.util.Preconditions.checkNotNull(entityKey, "Required parameter entityKey must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String entityKey;

      /**

       */
      public java.lang.String getEntityKey() {
        return entityKey;
      }

      public Delete setEntityKey(java.lang.String entityKey) {
        this.entityKey = entityKey;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Add or update an actor preference owned by the given user
     *
     * Create a request for the method "actorpreference.insert".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param accountKey
     * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.ActorPreferenceProtoActorNameValueAccountKey}
     * @return the request
     */
    public Insert insert(java.lang.String accountKey, com.appspot.willisaj_movie_match.moviematch.model.ActorPreferenceProtoActorNameValueAccountKey content) throws java.io.IOException {
      Insert result = new Insert(accountKey, content);
      initialize(result);
      return result;
    }

    public class Insert extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.ActorPreference> {

      private static final String REST_PATH = "actorpreference/insert/{account_key}";

      /**
       * Add or update an actor preference owned by the given user
       *
       * Create a request for the method "actorpreference.insert".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountKey
       * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.ActorPreferenceProtoActorNameValueAccountKey}
       * @since 1.13
       */
      protected Insert(java.lang.String accountKey, com.appspot.willisaj_movie_match.moviematch.model.ActorPreferenceProtoActorNameValueAccountKey content) {
        super(Moviematch.this, "POST", REST_PATH, content, com.appspot.willisaj_movie_match.moviematch.model.ActorPreference.class);
        this.accountKey = com.google.api.client.util.Preconditions.checkNotNull(accountKey, "Required parameter accountKey must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("account_key")
      private java.lang.String accountKey;

      /**

       */
      public java.lang.String getAccountKey() {
        return accountKey;
      }

      public Insert setAccountKey(java.lang.String accountKey) {
        this.accountKey = accountKey;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * List all of the actor preferences for a given account
     *
     * Create a request for the method "actorpreference.list".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param accountKey
     * @return the request
     */
    public List list(java.lang.String accountKey) throws java.io.IOException {
      List result = new List(accountKey);
      initialize(result);
      return result;
    }

    public class List extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.ActorPreferenceCollection> {

      private static final String REST_PATH = "actorpreference/list/{account_key}";

      /**
       * List all of the actor preferences for a given account
       *
       * Create a request for the method "actorpreference.list".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountKey
       * @since 1.13
       */
      protected List(java.lang.String accountKey) {
        super(Moviematch.this, "GET", REST_PATH, null, com.appspot.willisaj_movie_match.moviematch.model.ActorPreferenceCollection.class);
        this.accountKey = com.google.api.client.util.Preconditions.checkNotNull(accountKey, "Required parameter accountKey must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("account_key")
      private java.lang.String accountKey;

      /**

       */
      public java.lang.String getAccountKey() {
        return accountKey;
      }

      public List setAccountKey(java.lang.String accountKey) {
        this.accountKey = accountKey;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /**

       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long limit;

      /**

       */
      public java.lang.Long getLimit() {
        return limit;
      }

      public List setLimit(java.lang.Long limit) {
        this.limit = limit;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String order;

      /**

       */
      public java.lang.String getOrder() {
        return order;
      }

      public List setOrder(java.lang.String order) {
        this.order = order;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Directorpreference collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Moviematch moviematch = new Moviematch(...);}
   *   {@code Moviematch.Directorpreference.List request = moviematch.directorpreference().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Directorpreference directorpreference() {
    return new Directorpreference();
  }

  /**
   * The "directorpreference" collection of methods.
   */
  public class Directorpreference {

    /**
     * Delete the given director preference
     *
     * Create a request for the method "directorpreference.delete".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param entityKey
     * @return the request
     */
    public Delete delete(java.lang.String entityKey) throws java.io.IOException {
      Delete result = new Delete(entityKey);
      initialize(result);
      return result;
    }

    public class Delete extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.DirectorPreference> {

      private static final String REST_PATH = "directorpreference/delete/{entityKey}";

      /**
       * Delete the given director preference
       *
       * Create a request for the method "directorpreference.delete".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param entityKey
       * @since 1.13
       */
      protected Delete(java.lang.String entityKey) {
        super(Moviematch.this, "DELETE", REST_PATH, null, com.appspot.willisaj_movie_match.moviematch.model.DirectorPreference.class);
        this.entityKey = com.google.api.client.util.Preconditions.checkNotNull(entityKey, "Required parameter entityKey must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String entityKey;

      /**

       */
      public java.lang.String getEntityKey() {
        return entityKey;
      }

      public Delete setEntityKey(java.lang.String entityKey) {
        this.entityKey = entityKey;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Add or update an director preference owned by the given user
     *
     * Create a request for the method "directorpreference.insert".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param accountKey
     * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.DirectorPreferenceProtoDirectorNameValueAccountKey}
     * @return the request
     */
    public Insert insert(java.lang.String accountKey, com.appspot.willisaj_movie_match.moviematch.model.DirectorPreferenceProtoDirectorNameValueAccountKey content) throws java.io.IOException {
      Insert result = new Insert(accountKey, content);
      initialize(result);
      return result;
    }

    public class Insert extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.DirectorPreference> {

      private static final String REST_PATH = "directorpreference/insert/{account_key}";

      /**
       * Add or update an director preference owned by the given user
       *
       * Create a request for the method "directorpreference.insert".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountKey
       * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.DirectorPreferenceProtoDirectorNameValueAccountKey}
       * @since 1.13
       */
      protected Insert(java.lang.String accountKey, com.appspot.willisaj_movie_match.moviematch.model.DirectorPreferenceProtoDirectorNameValueAccountKey content) {
        super(Moviematch.this, "POST", REST_PATH, content, com.appspot.willisaj_movie_match.moviematch.model.DirectorPreference.class);
        this.accountKey = com.google.api.client.util.Preconditions.checkNotNull(accountKey, "Required parameter accountKey must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("account_key")
      private java.lang.String accountKey;

      /**

       */
      public java.lang.String getAccountKey() {
        return accountKey;
      }

      public Insert setAccountKey(java.lang.String accountKey) {
        this.accountKey = accountKey;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * List all of the director preferences for a given account
     *
     * Create a request for the method "directorpreference.list".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param accountKey
     * @return the request
     */
    public List list(java.lang.String accountKey) throws java.io.IOException {
      List result = new List(accountKey);
      initialize(result);
      return result;
    }

    public class List extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.DirectorPreferenceCollection> {

      private static final String REST_PATH = "directorpreference/list/{account_key}";

      /**
       * List all of the director preferences for a given account
       *
       * Create a request for the method "directorpreference.list".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountKey
       * @since 1.13
       */
      protected List(java.lang.String accountKey) {
        super(Moviematch.this, "GET", REST_PATH, null, com.appspot.willisaj_movie_match.moviematch.model.DirectorPreferenceCollection.class);
        this.accountKey = com.google.api.client.util.Preconditions.checkNotNull(accountKey, "Required parameter accountKey must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("account_key")
      private java.lang.String accountKey;

      /**

       */
      public java.lang.String getAccountKey() {
        return accountKey;
      }

      public List setAccountKey(java.lang.String accountKey) {
        this.accountKey = accountKey;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /**

       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long limit;

      /**

       */
      public java.lang.Long getLimit() {
        return limit;
      }

      public List setLimit(java.lang.Long limit) {
        this.limit = limit;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String order;

      /**

       */
      public java.lang.String getOrder() {
        return order;
      }

      public List setOrder(java.lang.String order) {
        this.order = order;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Genrepreference collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Moviematch moviematch = new Moviematch(...);}
   *   {@code Moviematch.Genrepreference.List request = moviematch.genrepreference().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Genrepreference genrepreference() {
    return new Genrepreference();
  }

  /**
   * The "genrepreference" collection of methods.
   */
  public class Genrepreference {

    /**
     * Delete the given genre preference
     *
     * Create a request for the method "genrepreference.delete".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param entityKey
     * @return the request
     */
    public Delete delete(java.lang.String entityKey) throws java.io.IOException {
      Delete result = new Delete(entityKey);
      initialize(result);
      return result;
    }

    public class Delete extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.GenrePreference> {

      private static final String REST_PATH = "genrepreference/delete/{entityKey}";

      /**
       * Delete the given genre preference
       *
       * Create a request for the method "genrepreference.delete".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param entityKey
       * @since 1.13
       */
      protected Delete(java.lang.String entityKey) {
        super(Moviematch.this, "DELETE", REST_PATH, null, com.appspot.willisaj_movie_match.moviematch.model.GenrePreference.class);
        this.entityKey = com.google.api.client.util.Preconditions.checkNotNull(entityKey, "Required parameter entityKey must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String entityKey;

      /**

       */
      public java.lang.String getEntityKey() {
        return entityKey;
      }

      public Delete setEntityKey(java.lang.String entityKey) {
        this.entityKey = entityKey;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Add or update a genre preference owned by the given user
     *
     * Create a request for the method "genrepreference.insert".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param accountKey
     * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.GenrePreferenceProtoGenreNameAccountKey}
     * @return the request
     */
    public Insert insert(java.lang.String accountKey, com.appspot.willisaj_movie_match.moviematch.model.GenrePreferenceProtoGenreNameAccountKey content) throws java.io.IOException {
      Insert result = new Insert(accountKey, content);
      initialize(result);
      return result;
    }

    public class Insert extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.GenrePreference> {

      private static final String REST_PATH = "genrepreference/insert/{account_key}";

      /**
       * Add or update a genre preference owned by the given user
       *
       * Create a request for the method "genrepreference.insert".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountKey
       * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.GenrePreferenceProtoGenreNameAccountKey}
       * @since 1.13
       */
      protected Insert(java.lang.String accountKey, com.appspot.willisaj_movie_match.moviematch.model.GenrePreferenceProtoGenreNameAccountKey content) {
        super(Moviematch.this, "POST", REST_PATH, content, com.appspot.willisaj_movie_match.moviematch.model.GenrePreference.class);
        this.accountKey = com.google.api.client.util.Preconditions.checkNotNull(accountKey, "Required parameter accountKey must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("account_key")
      private java.lang.String accountKey;

      /**

       */
      public java.lang.String getAccountKey() {
        return accountKey;
      }

      public Insert setAccountKey(java.lang.String accountKey) {
        this.accountKey = accountKey;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * List all of the genre preferences for a given account
     *
     * Create a request for the method "genrepreference.list".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param accountKey
     * @return the request
     */
    public List list(java.lang.String accountKey) throws java.io.IOException {
      List result = new List(accountKey);
      initialize(result);
      return result;
    }

    public class List extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.GenrePreferenceCollection> {

      private static final String REST_PATH = "genrepreference/list/{account_key}";

      /**
       * List all of the genre preferences for a given account
       *
       * Create a request for the method "genrepreference.list".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountKey
       * @since 1.13
       */
      protected List(java.lang.String accountKey) {
        super(Moviematch.this, "GET", REST_PATH, null, com.appspot.willisaj_movie_match.moviematch.model.GenrePreferenceCollection.class);
        this.accountKey = com.google.api.client.util.Preconditions.checkNotNull(accountKey, "Required parameter accountKey must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("account_key")
      private java.lang.String accountKey;

      /**

       */
      public java.lang.String getAccountKey() {
        return accountKey;
      }

      public List setAccountKey(java.lang.String accountKey) {
        this.accountKey = accountKey;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /**

       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long limit;

      /**

       */
      public java.lang.Long getLimit() {
        return limit;
      }

      public List setLimit(java.lang.Long limit) {
        this.limit = limit;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String order;

      /**

       */
      public java.lang.String getOrder() {
        return order;
      }

      public List setOrder(java.lang.String order) {
        this.order = order;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Platformpreference collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Moviematch moviematch = new Moviematch(...);}
   *   {@code Moviematch.Platformpreference.List request = moviematch.platformpreference().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Platformpreference platformpreference() {
    return new Platformpreference();
  }

  /**
   * The "platformpreference" collection of methods.
   */
  public class Platformpreference {

    /**
     * Delete the given platform preference
     *
     * Create a request for the method "platformpreference.delete".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param entityKey
     * @return the request
     */
    public Delete delete(java.lang.String entityKey) throws java.io.IOException {
      Delete result = new Delete(entityKey);
      initialize(result);
      return result;
    }

    public class Delete extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.PlatformPreference> {

      private static final String REST_PATH = "platformpreference/delete/{entityKey}";

      /**
       * Delete the given platform preference
       *
       * Create a request for the method "platformpreference.delete".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param entityKey
       * @since 1.13
       */
      protected Delete(java.lang.String entityKey) {
        super(Moviematch.this, "DELETE", REST_PATH, null, com.appspot.willisaj_movie_match.moviematch.model.PlatformPreference.class);
        this.entityKey = com.google.api.client.util.Preconditions.checkNotNull(entityKey, "Required parameter entityKey must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String entityKey;

      /**

       */
      public java.lang.String getEntityKey() {
        return entityKey;
      }

      public Delete setEntityKey(java.lang.String entityKey) {
        this.entityKey = entityKey;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Add or update a platform preference owned by the given user
     *
     * Create a request for the method "platformpreference.insert".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param accountKey
     * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.PlatformPreferenceProtoPlatformNameAccountKey}
     * @return the request
     */
    public Insert insert(java.lang.String accountKey, com.appspot.willisaj_movie_match.moviematch.model.PlatformPreferenceProtoPlatformNameAccountKey content) throws java.io.IOException {
      Insert result = new Insert(accountKey, content);
      initialize(result);
      return result;
    }

    public class Insert extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.PlatformPreference> {

      private static final String REST_PATH = "platformpreference/insert/{account_key}";

      /**
       * Add or update a platform preference owned by the given user
       *
       * Create a request for the method "platformpreference.insert".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountKey
       * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.PlatformPreferenceProtoPlatformNameAccountKey}
       * @since 1.13
       */
      protected Insert(java.lang.String accountKey, com.appspot.willisaj_movie_match.moviematch.model.PlatformPreferenceProtoPlatformNameAccountKey content) {
        super(Moviematch.this, "POST", REST_PATH, content, com.appspot.willisaj_movie_match.moviematch.model.PlatformPreference.class);
        this.accountKey = com.google.api.client.util.Preconditions.checkNotNull(accountKey, "Required parameter accountKey must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("account_key")
      private java.lang.String accountKey;

      /**

       */
      public java.lang.String getAccountKey() {
        return accountKey;
      }

      public Insert setAccountKey(java.lang.String accountKey) {
        this.accountKey = accountKey;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * List all of the platform preferences for a given account
     *
     * Create a request for the method "platformpreference.list".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param accountKey
     * @return the request
     */
    public List list(java.lang.String accountKey) throws java.io.IOException {
      List result = new List(accountKey);
      initialize(result);
      return result;
    }

    public class List extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.PlatformPreferenceCollection> {

      private static final String REST_PATH = "platformpreference/list/{account_key}";

      /**
       * List all of the platform preferences for a given account
       *
       * Create a request for the method "platformpreference.list".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountKey
       * @since 1.13
       */
      protected List(java.lang.String accountKey) {
        super(Moviematch.this, "GET", REST_PATH, null, com.appspot.willisaj_movie_match.moviematch.model.PlatformPreferenceCollection.class);
        this.accountKey = com.google.api.client.util.Preconditions.checkNotNull(accountKey, "Required parameter accountKey must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("account_key")
      private java.lang.String accountKey;

      /**

       */
      public java.lang.String getAccountKey() {
        return accountKey;
      }

      public List setAccountKey(java.lang.String accountKey) {
        this.accountKey = accountKey;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /**

       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long limit;

      /**

       */
      public java.lang.Long getLimit() {
        return limit;
      }

      public List setLimit(java.lang.Long limit) {
        this.limit = limit;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String order;

      /**

       */
      public java.lang.String getOrder() {
        return order;
      }

      public List setOrder(java.lang.String order) {
        this.order = order;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Ratingpreference collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Moviematch moviematch = new Moviematch(...);}
   *   {@code Moviematch.Ratingpreference.List request = moviematch.ratingpreference().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Ratingpreference ratingpreference() {
    return new Ratingpreference();
  }

  /**
   * The "ratingpreference" collection of methods.
   */
  public class Ratingpreference {

    /**
     * Delete the given rating preference
     *
     * Create a request for the method "ratingpreference.delete".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param entityKey
     * @return the request
     */
    public Delete delete(java.lang.String entityKey) throws java.io.IOException {
      Delete result = new Delete(entityKey);
      initialize(result);
      return result;
    }

    public class Delete extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.RatingPreference> {

      private static final String REST_PATH = "ratingpreference/delete/{entityKey}";

      /**
       * Delete the given rating preference
       *
       * Create a request for the method "ratingpreference.delete".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param entityKey
       * @since 1.13
       */
      protected Delete(java.lang.String entityKey) {
        super(Moviematch.this, "DELETE", REST_PATH, null, com.appspot.willisaj_movie_match.moviematch.model.RatingPreference.class);
        this.entityKey = com.google.api.client.util.Preconditions.checkNotNull(entityKey, "Required parameter entityKey must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String entityKey;

      /**

       */
      public java.lang.String getEntityKey() {
        return entityKey;
      }

      public Delete setEntityKey(java.lang.String entityKey) {
        this.entityKey = entityKey;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Add or update a rating preference owned by the given user
     *
     * Create a request for the method "ratingpreference.insert".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param accountKey
     * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.RatingPreferenceProtoRatingNameAccountKey}
     * @return the request
     */
    public Insert insert(java.lang.String accountKey, com.appspot.willisaj_movie_match.moviematch.model.RatingPreferenceProtoRatingNameAccountKey content) throws java.io.IOException {
      Insert result = new Insert(accountKey, content);
      initialize(result);
      return result;
    }

    public class Insert extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.RatingPreference> {

      private static final String REST_PATH = "ratingpreference/insert/{account_key}";

      /**
       * Add or update a rating preference owned by the given user
       *
       * Create a request for the method "ratingpreference.insert".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountKey
       * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.RatingPreferenceProtoRatingNameAccountKey}
       * @since 1.13
       */
      protected Insert(java.lang.String accountKey, com.appspot.willisaj_movie_match.moviematch.model.RatingPreferenceProtoRatingNameAccountKey content) {
        super(Moviematch.this, "POST", REST_PATH, content, com.appspot.willisaj_movie_match.moviematch.model.RatingPreference.class);
        this.accountKey = com.google.api.client.util.Preconditions.checkNotNull(accountKey, "Required parameter accountKey must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("account_key")
      private java.lang.String accountKey;

      /**

       */
      public java.lang.String getAccountKey() {
        return accountKey;
      }

      public Insert setAccountKey(java.lang.String accountKey) {
        this.accountKey = accountKey;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * List all of the rating preferences for a given account
     *
     * Create a request for the method "ratingpreference.list".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param accountKey
     * @return the request
     */
    public List list(java.lang.String accountKey) throws java.io.IOException {
      List result = new List(accountKey);
      initialize(result);
      return result;
    }

    public class List extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.RatingPreferenceCollection> {

      private static final String REST_PATH = "ratingpreference/list/{account_key}";

      /**
       * List all of the rating preferences for a given account
       *
       * Create a request for the method "ratingpreference.list".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountKey
       * @since 1.13
       */
      protected List(java.lang.String accountKey) {
        super(Moviematch.this, "GET", REST_PATH, null, com.appspot.willisaj_movie_match.moviematch.model.RatingPreferenceCollection.class);
        this.accountKey = com.google.api.client.util.Preconditions.checkNotNull(accountKey, "Required parameter accountKey must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("account_key")
      private java.lang.String accountKey;

      /**

       */
      public java.lang.String getAccountKey() {
        return accountKey;
      }

      public List setAccountKey(java.lang.String accountKey) {
        this.accountKey = accountKey;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /**

       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long limit;

      /**

       */
      public java.lang.Long getLimit() {
        return limit;
      }

      public List setLimit(java.lang.Long limit) {
        this.limit = limit;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String order;

      /**

       */
      public java.lang.String getOrder() {
        return order;
      }

      public List setOrder(java.lang.String order) {
        this.order = order;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Wishlistmovie collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Moviematch moviematch = new Moviematch(...);}
   *   {@code Moviematch.Wishlistmovie.List request = moviematch.wishlistmovie().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Wishlistmovie wishlistmovie() {
    return new Wishlistmovie();
  }

  /**
   * The "wishlistmovie" collection of methods.
   */
  public class Wishlistmovie {

    /**
     * Delete the given Wishlist Movie preference
     *
     * Create a request for the method "wishlistmovie.delete".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param entityKey
     * @return the request
     */
    public Delete delete(java.lang.String entityKey) throws java.io.IOException {
      Delete result = new Delete(entityKey);
      initialize(result);
      return result;
    }

    public class Delete extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.WishlistMovie> {

      private static final String REST_PATH = "wishlistmovie/delete/{entityKey}";

      /**
       * Delete the given Wishlist Movie preference
       *
       * Create a request for the method "wishlistmovie.delete".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param entityKey
       * @since 1.13
       */
      protected Delete(java.lang.String entityKey) {
        super(Moviematch.this, "DELETE", REST_PATH, null, com.appspot.willisaj_movie_match.moviematch.model.WishlistMovie.class);
        this.entityKey = com.google.api.client.util.Preconditions.checkNotNull(entityKey, "Required parameter entityKey must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String entityKey;

      /**

       */
      public java.lang.String getEntityKey() {
        return entityKey;
      }

      public Delete setEntityKey(java.lang.String entityKey) {
        this.entityKey = entityKey;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Add or update a wishlist movie owned by the given user
     *
     * Create a request for the method "wishlistmovie.insert".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param accountKey
     * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.WishlistMovieProtoMovieNameMovieIdAccountKey}
     * @return the request
     */
    public Insert insert(java.lang.String accountKey, com.appspot.willisaj_movie_match.moviematch.model.WishlistMovieProtoMovieNameMovieIdAccountKey content) throws java.io.IOException {
      Insert result = new Insert(accountKey, content);
      initialize(result);
      return result;
    }

    public class Insert extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.WishlistMovie> {

      private static final String REST_PATH = "wishlistmovie/insert/{account_key}";

      /**
       * Add or update a wishlist movie owned by the given user
       *
       * Create a request for the method "wishlistmovie.insert".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountKey
       * @param content the {@link com.appspot.willisaj_movie_match.moviematch.model.WishlistMovieProtoMovieNameMovieIdAccountKey}
       * @since 1.13
       */
      protected Insert(java.lang.String accountKey, com.appspot.willisaj_movie_match.moviematch.model.WishlistMovieProtoMovieNameMovieIdAccountKey content) {
        super(Moviematch.this, "POST", REST_PATH, content, com.appspot.willisaj_movie_match.moviematch.model.WishlistMovie.class);
        this.accountKey = com.google.api.client.util.Preconditions.checkNotNull(accountKey, "Required parameter accountKey must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("account_key")
      private java.lang.String accountKey;

      /**

       */
      public java.lang.String getAccountKey() {
        return accountKey;
      }

      public Insert setAccountKey(java.lang.String accountKey) {
        this.accountKey = accountKey;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * List all of the wishlist movies for a given account
     *
     * Create a request for the method "wishlistmovie.list".
     *
     * This request holds the parameters needed by the moviematch server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param accountKey
     * @return the request
     */
    public List list(java.lang.String accountKey) throws java.io.IOException {
      List result = new List(accountKey);
      initialize(result);
      return result;
    }

    public class List extends MoviematchRequest<com.appspot.willisaj_movie_match.moviematch.model.WishlistMovieCollection> {

      private static final String REST_PATH = "wishlistmovie/list/{account_key}";

      /**
       * List all of the wishlist movies for a given account
       *
       * Create a request for the method "wishlistmovie.list".
       *
       * This request holds the parameters needed by the the moviematch server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountKey
       * @since 1.13
       */
      protected List(java.lang.String accountKey) {
        super(Moviematch.this, "GET", REST_PATH, null, com.appspot.willisaj_movie_match.moviematch.model.WishlistMovieCollection.class);
        this.accountKey = com.google.api.client.util.Preconditions.checkNotNull(accountKey, "Required parameter accountKey must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("account_key")
      private java.lang.String accountKey;

      /**

       */
      public java.lang.String getAccountKey() {
        return accountKey;
      }

      public List setAccountKey(java.lang.String accountKey) {
        this.accountKey = accountKey;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /**

       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long limit;

      /**

       */
      public java.lang.Long getLimit() {
        return limit;
      }

      public List setLimit(java.lang.Long limit) {
        this.limit = limit;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String order;

      /**

       */
      public java.lang.String getOrder() {
        return order;
      }

      public List setOrder(java.lang.String order) {
        this.order = order;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Moviematch}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Moviematch}. */
    @Override
    public Moviematch build() {
      return new Moviematch(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link MoviematchRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setMoviematchRequestInitializer(
        MoviematchRequestInitializer moviematchRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(moviematchRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
